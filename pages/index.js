"use client";

import DisplayCode from "@/components/DisplayCode";
import DisplayCommits from "@/components/DisplayCommits";
import DisplayIssues from "@/components/DisplayIssues";
import DisplayRepositories from "@/components/DisplayRepositories";
import DisplayTopics from "@/components/DisplayTopics";
import DisplayUsers from "@/components/DisplayUsers";
import Pagination from "@/components/Pagination";
import ParamForm from "@/components/ParamForm";
import QueryForm from "@/components/QueryForm";
import TypeDropDown from "@/components/TypeDropDown";
import Head from "next/head";
import { useEffect, useState } from "react";

export default function Home() {
    const [type, setType] = useState("users");
    const [dataObj, setDataObj] = useState({});
    const [query, setQuery] = useState("");
    const types = [
        "users",
        "repositories",
        "code",
        "commits",
        "issues",
        "topics",
    ];
    const [sort, setSort] = useState("best match");
    const [order, setOrder] = useState("desc");
    const [perpage, setPerpage] = useState(30);
    const [page, setPage] = useState(1);

    // for pagination
    const [currentPage, setCurrentPage] = useState(1);
    let totalPages = Math.floor(dataObj?.total_count / perpage) + 1;

    useEffect(() => {
        // reset once category or filters change
        setQuery("");
        setDataObj({});
        setPage(1);
        setCurrentPage(1);
    }, [type, sort, order, perpage]);

    const handleTypeFromChild = (option) => {
        setType(option);
        setQuery("");
    };

    const handleDataObjFromChild = (obj) => {
        setDataObj(obj);
    };

    const handleQueryFromChild = (query) => {
        setQuery(query);
    };

    const handleSortFromChild = (input) => {
        setSort(input);
    };

    const handleOrderFromChild = (input) => {
        setOrder(input);
    };

    const handlePerpageFromChild = (input) => {
        setPerpage(input);
    };

    // for pagination
    const handleChangePage = (page) => {
        setCurrentPage(page);
        setPage(page);
    };

    return (
        <>
            <Head>
                <title>Autocomplete Page</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex flex-col items-center justify-center w-full">
                <div className="w-full bg-blue-100 item">
                    <div className="flex flex-row py-5 items-center justify-center">
                        <img
                            src="/github-mark.svg"
                            alt="logo"
                            className="w-10 h-10 mr-2"
                        />
                        <h1 className="flex text-3xl font-bold my-4">
                            GitHub Search
                        </h1>
                    </div>
                    <div className="flex flex-row w-full justify-around">
                        <div className="flex flex-col">
                            <p className="font-bold pb-4">Category:</p>
                            <TypeDropDown
                                types={types}
                                handleTypeFromChild={handleTypeFromChild}
                            />
                        </div>

                        <div className="flex flex-col w-1/4">
                            <p className="font-bold pb-2">Filter By:</p>
                            <ParamForm
                                sort={sort}
                                order={order}
                                perpage={perpage}
                                page={page}
                                handleSortFromChild={handleSortFromChild}
                                handleOrderFromChild={handleOrderFromChild}
                                handlePerpageFromChild={handlePerpageFromChild}
                            />
                        </div>

                        <div className="flex flex-col w-1/3">
                            <p className="font-bold pb-2">Query:</p>
                            <QueryForm
                                type={type}
                                handleDataObjFromChild={handleDataObjFromChild}
                                query={query}
                                handleQueryFromChild={handleQueryFromChild}
                                sort={sort}
                                order={order}
                                perpage={perpage}
                                page={page}
                            />
                        </div>
                    </div>

                    <div className="flex w-full justify-center py-10 pl-8">
                        <p>
                            <span>
                                For more information on how to set parameters
                                using GitHub API, kindly look at the{" "}
                            </span>
                            <a
                                href="https://developer.github.com/v3/search"
                                className="underline text-blue-600 hover:text-blue-800 visited:text-purple-600"
                                target="_blank"
                            >
                                documentation
                            </a>
                            <span> on GitHub Docs.</span>
                        </p>
                    </div>
                </div>

                <div className="flex w-full justify-center py-5">
                    <Pagination
                        currentPage={currentPage}
                        totalPages={totalPages}
                        handleChangePage={handleChangePage}
                    />
                </div>

                <div className="flex flex-col w-full mt-5">
                    <p className="pt-2 pl-10 text-xl font-bold">
                        {dataObj?.total_count?.toLocaleString("en-US") || "0"}{" "}
                        <span>files</span>
                    </p>
                    <p className="pt-2 pl-10 text-xl font-bold">
                        <span>Showing results for </span>
                        {dataObj?.items?.length || "0"} <span>files</span>
                    </p>
                    {dataObj?.response && (
                        <>
                            <p className="pt-5 pl-10">
                                Error Message: {dataObj?.message}
                            </p>
                            <p className="pl-10">
                                Details:{" "}
                                {JSON.stringify(dataObj?.response?.data)}
                            </p>
                        </>
                    )}
                </div>

                <div className="flex justify-center w-full">
                    {type == "users" && <DisplayUsers dataObj={dataObj} />}
                    {type == "repositories" && (
                        <DisplayRepositories dataObj={dataObj} />
                    )}
                    {type == "code" && <DisplayCode dataObj={dataObj} />}
                    {type == "commits" && <DisplayCommits dataObj={dataObj} />}
                    {type == "issues" && <DisplayIssues dataObj={dataObj} />}
                    {type == "topics" && <DisplayTopics dataObj={dataObj} />}
                </div>
            </div>
        </>
    );
}
